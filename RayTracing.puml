@startuml

class Triplet
class Vector
class Point
class Color
class Main
class Light
class DirectionalLight
class PonctualLight
abstract class AObject

class Plane
class Triangle
class Sphere

class Scene
interface IBuilder

Vector *-- Triplet : use
Color *-- Triplet : use
Point *-- Triplet : use

DirectionalLight *-- Vector : use

Light *-- Color : use
PonctualLight *-- Point : use


Triangle "3" *-- "0..n" Point : use
Plane  *-- Vector : use
Plane  *-- Point : use
Sphere *-- Point : use

Sphere *-- Color : use
Triangle *-- Color : use
Plane *-- Color : use
Triangle *-- Vector : use
AObject *-- Color

Parser *-- IBuilder : builder
Scene <-- SceneBuilder
Scene "0..n" *-- "0.1" Light
Scene "0..n" *-- "0.1" AObject
Scene "3"*-- "0.1" Triplet : use
RayTracing *-- Scene : use

class Triplet {
-double x
-double y
-double z

+Triplet(x,y,z)
+toString() : String
+getX() : double
+getY() : double
+getZ() : double
+setX() : void
+setY() : void
+setZ() : void
+addition(Triplet triplet) : Triplet
+subtraction(Triplet triplet) : Triplet
+scalarMultiplication(double d) : Triplet
+scalarProduct(Triplet triplet) : double
+vectorProduct(Triplet triplet) : Triplet
+schurProduct(Triplet triplet) : Triplet
+norm() : double
+normalize() : Triplet
}

class Vector{
-Triplet triplet
+Vector(Triplet triplet)
+Vector(double x, double y, double z)
+addition(Triplet triplet) : Vector
+subtraction(Triplet triplet) : Vector
+scalarMultiplication(double d) : Vector
+scalarProduct(Triplet triplet) : double
+vectorProduct(Triplet triplet) : Vector
+norm() : double
+normalize() : Vector
+ getTriplet() : Triplet
+ toString() : String
+ oppositeDirection(Vector v) : boolean
}

class Point{
- Triplet triplet
+Point(Triplet triplet)
+Point(double x, double y, double z)
+subtraction(Triplet triplet) : Vector
+scalarMultiplication(double d) : Point
+ getTriplet() : Triplet
+ toString() : String
}

class Color{
- Triplet triplet
+Color(Triplet triplet)
+Color(double x, double y, double z)
+ addition(Triplet triplet) : Color
+ scalarMultiplication(double d) : Color
+ schurProduct(Triplet triplet) : Color
+ getTriplet() : Triplet
+ toString() : String
}


class Light{
- Color color
+ Light(Color color)
+ getColor() : Color
}

class PonctualLight extends Light{
- Point point
+ PonctualLight(Point point, Color color)
+ getPoint() : Point
+ toString() : String
}

class DirectionalLight extends Light{
- Vector vector
+ DirectionalLight(Vector vector, Color color)
+ getVector() : Vector
+ toString() : String
}

abstract class AObject {
- Color color
+ distance(Point p, Vector d) : double
+ getColor() : color
+ setColor() : void
+ calcP(Vector d, Triplet lookFrom) : Point
}



class Triangle extends AObject {
- Point a
- Point b
- Point c
- Vector normal
- Color color
+ Triangle(Point a, Point b, Point c, Color color)
+ toString() : String
+ getNormal() : Vector
+ calcP(Vector d, Triplet lookFrom) : Point
+ distance(Point p, Vector d) : double
+ getColor() : Color
}

class Plane extends AObject{
- Point coordinate
- Vector normal
- Color color
+ Plane(Point coordinate, Vector normal,Color color)
+ toString() : String
+ getNormal() : Vector
+ calcP(Vector d, Triplet lookFrom) : Point
+ distance(Point p, Vector d) : double
+ getColor() : Color
}

class Sphere extends AObject {
- Point coordinate
- double radius
- Color color
+ Sphere(Point coordinate, double radius, Color color)
+ toString() : String
+ getCoordinate() : Point
+ getRadius() : double
+ distance(Point p, Vector d) : double
+ calcP(Vector d, Triplet lookFrom) : Point
+ getColor() : Color
+ equals(Object o) : boolean
+ hashCode() : int
}

note "Patron de conception : Builder" as N2
Scene .. N2
IBuilder .. N2
SceneBuilder .. N2
Parser .. N2

class Scene{
- int width
- int height
- Triplet[] camera
- Light[] lights
- Map<String, Object> colors
- double shininess
- AObject[] AObjects
- int fov
- String output
- boolean shadow
+ Scene(int width, int height, Triplet[] camera, Light[] lights, Color[] colors, AObject[] objects, int fov, String output, boolean shadow)
+ toString() : String
+ getWidth() : int
+ getHeight() : int
+ getCamera() : Triplet[]
+ getLights() : Light[]
+ getColors() : Map<String, Object>
+ getAObjects() : AObject[]
+ getFov() : int
+ getOutput() : String
+ isShadow() : boolean
}

interface IBuilder {
+ buildScene(int width, int height, double shininess, String output, boolean shadow): void
+ buildCamera(Triplet[] camera, int fov) : void
+ buildObject(AObject[] objects) : void
+ buildLight(Light[] lights) : void
+ buildColors(Map<String, Object> colors) : void
}

class SceneBuilder implements IBuilder{
- int width
- int height
- Triplet[] camera
- int fov
- Light[] lights
- Map<String, Object> colors
- double shininess
- AObject[] objects
- String output
- boolean shadow
+ buildScene(int width, int height, double shininess, String output, boolean shadow): void
+ buildCamera(Triplet[] camera, int fov) : void
+ buildObject(AObject[] objects) : void
+ buildLight(Light[] lights) : void
+ buildColors(Map<String, Object>) : void
+ getResult() : Scene
}

class Parser {
- IBuilder builder
- String path
+Parser(String path)
+construct() : void
+ getColors() : Map<String, Object>
+getScene() : Map<String, Object>
+getLight() : Light[]
+getAObject() : AObject[]
+ getBuilder() : IBuilder
}

class Main{
+ {static} main(String args[])
}

class RayTracing{
- Scene scene
+ RayTracing(Scene scene, IStrategy strategy)
+ createImage(Color[][] colors) : void
}

class PhongModel implements IStrategy {
modelMethod(AObject object, int idObj , Point p, Scene scene, Vector d) : Color
modelMethodShadow(AObject object, int idObj , Point p, Scene scene, Vector d, List<Light> list) : Color
}

class BasicModel implements IStrategy {
modelMethod(AObject object, int idObj , Point p, Scene scene, Vector d) : Color
modelMethodShadow(AObject object, int idObj , Point p, Scene scene, Vector d, List<Light> list) : Color
}
class LambertModel implements IStrategy{
modelMethod(AObject object, int idObj , Point p, Scene scene, Vector d) : Color
modelMethodShadow(AObject object, int idObj , Point p, Scene scene, Vector d, List<Light> list) : Color
}
interface IStrategy {
modelMethod(AObject object, int idObj , Point p, Scene scene, Vector d) : Color
modelMethodShadow(AObject object, int idObj , Point p, Scene scene, Vector d, List<Light> list) : Color
}

note "Patron de conception : Strategie" as N3
BasicModel .. N3
LambertModel .. N3
IStrategy .. N3
RayTracing .. N3

IShadow --o RayTracing

interface IShadow {
shadowRequest(Scene scene, AObject object, Point p) : Light[]
}
class RealShadow implements IShadow {
shadowRequest(Scene scene, AObject object, Point p) : Light[]
}
class ProxyShadow implements IShadow {
shadowRequest(Scene scene, AObject object, Point p) : Light[]
}

note "Patron de conception : Proxy" as N4
IShadow .. N4
RealShadow .. N4
ProxyShadow .. N4



@enduml