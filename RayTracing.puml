@startuml

class Triplet
class Vector
class Point
class Color
class Main
class Light
class DirectionalLight
class PonctualLight
abstract class AObject

class Plane
class Triangle
class Sphere

class Scene
interface IBuilder
class SceneBuilder

Vector *-- Triplet : use
Color *-- Triplet : use
Point *-- Triplet : use

DirectionalLight *-- Vector : use

Light *-- Color : use
PonctualLight *-- Point : use


Triangle "3" *-- "0..n" Point : use
Plane "2" *-- "0..n" Triplet : use
Sphere *-- Triplet : use

Parser *-- IBuilder : builder
IBuilder <|-- SceneBuilder : implements
Scene <-- SceneBuilder
Scene "0..n" *-- "0.1" Light
Scene "0..n" *-- "0.1" AObject
Scene "3"*-- "0.1" Triplet : use



class Triplet {
-double x
-double y
-double z

+Triplet(x,y,z)
+toString() : String
+getX() : double
+getY() : double
+getZ() : double
+addition(Triplet triplet) : Triplet
+subtraction(Triplet triplet) : Triplet
+scalarMultiplication(double d) : Triplet
+scalarProduct(Triplet triplet) : double
+vectorProduct(Triplet triplet) : Triplet
+schurProduct(Triplet triplet) : Triplet
+norm() : double
+normalize() : Triplet
}

class Vector{
-Triplet triplet
+Vector(Triplet triplet)
+Vector(double x, double y, double z)
+addition(Triplet triplet) : Vector
+subtraction(Triplet triplet) : Vector
+scalarMultiplication(double d) : Vector
+scalarProduct(Triplet triplet) : double
+vectorProduct(Triplet triplet) : Vector
+norm() : double
+normalize() : Vector
+ getTriplet() : Triplet
+ toString() : String
}

class Point{
- Triplet triplet
+Point(Triplet triplet)
+Point(double x, double y, double z)
+subtraction(Triplet triplet) : Vector
+scalarMultiplication(double d) : Point
+ getTriplet() : Triplet
+ toString() : String
}

class Color{
- Triplet triplet
+Color(Triplet triplet)
+Color(double x, double y, double z)
+ addition(Triplet triplet) : Color
+ scalarMultiplication(double d) : Color
+ schurProduct(Triplet triplet) : Color
+ getTriplet() : Triplet
+ toString() : String
}


class Light{
Color color
+ Light(Color color)
}

class PonctualLight extends Light{
- Point point
+ PonctualLight(Point point, Color color)
+ getPoint() : Point
+ toString() : String
}

class DirectionalLight extends Light{
- Vector vector
+ DirectionalLight(Vector vector, Color color)
+ getVector() : Vector
+ toString() : String
}

class Triangle extends AObject {
- Point a
- Point b
- Point c
+ Triangle(Point a, Point b, Point c)
+ toString() : String
}

class Plane extends AObject{
- Point coordinate
- Triplet normal
+ Plane()
+ toString() : String
}

class Sphere extends AObject {
- Point coordinate
- double radius
+ Sphere(Point coordinate, double radius)
+ toString() : String
}

/'note "Patron de conception : Builder" as N2
Scene .. N2
IBuilder .. N2
SceneBuilder .. N2
Parser .. N2'/

class Scene{
- int width
- int height
- Triplet[] camera
- int fov
- Light[] lights
- Color[] colors
- double shininess
- AObject[] AObjects
- String output
+ Scene(int width, int height, Triplet[] camera, Light[] lights, Color[] colors, AObject[] objects, int fov, String output)
+ toString() : String
}

interface IBuilder {
+ buildScene(int width, int height, double shininess, String output): void
+ buildCamera(Triplet[] camera, int fov) : void
+ buildObject(AObject[] objects) : void
+ buildLight(Light[] lights) : void
}

class SceneBuilder {
- int width
- int height
- Triplet[] camera
- int fov
- Light[] lights
- Color[] colors
- double shininess
- AObject[] objects
- String output
+ buildScene(int width, int height, double shininess, String output): void
+ buildCamera(Triplet[] camera, int fov) : void
+ buildObject(AObject[] objects) : void
+ buildLight(Light[] lights) : void
+ getResult() : Scene
}

class Parser {
+IBuilder builder
+String chemin
+Parser(String chemin)
+construct() : void
+ getColors() : JSONObject
+getScene() : JSONObject
+getLight() : Light[]
+getAObject() : AObject[]
+ getBuilder() : IBuilder
+ toString() : String
}

class Main{
+ {static} main(String args[])
}

@enduml